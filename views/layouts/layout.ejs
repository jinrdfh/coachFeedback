<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/myCard.css">
    <!--STYLES END-->
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  </head>

  <body>
    <% labelBookings = "style = display:none "; %>
    <% labelHelloMsg = "style = display:none"; %>
    <% labelLogin = "style = display:none"; %>
    <% labelLogOut = "style = display:none"; %>
    <% labelCreate = "style = display:none"; %>
    <% labelAdmin = "style = display:none"; %>
    <% userName = ""; %>
    <% userId = 0; %>
    <% if ("session" in req && "role" in req.session) { %>
      <% userName = req.session.username; %>
      <% if ("admin" == req.session.role) { %>
        <% tpUserRole = "admin"; %>
        <% labelCreate = ""; %>
        <% labelAdmin = ""; %>
        <% labelHelloMsg = ""; %>
        <% labelLogOut = ""; %>
      <% } else if ("member" == req.session.role) { %>
        <% tpUserRole = "member"; %>
        <% labelBookings = ""; %>
        <% labelHelloMsg = ""; %>
        <% labelLogOut = ""; %>
        <% userId = req.session.userId; %>
      <% } else { %>
        <% tpUserRole = "everyOne"; %>
        <% labelLogin = ""; %>
      <% } %>
    <% } else { %>
      <% tpUserRole = "everyOne"; %>
      <% labelLogin = ""; %>
    <% } %>
    <div class = "container">
      <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="/">Home</a>
	    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup"
        aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      	</button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
          <div class="navbar-nav">
            <!-- <a class="nav-item nav-link" href="/restaurant/search">Search</a> -->
            <a class="nav-item nav-link" href="/restaurant" <%= labelCreate %> >Create</a>
            <a class="nav-item nav-link" href="/restaurant/admin" <%= labelAdmin %> >View course & feedbacks</a>
            <a class="nav-item nav-link" href="/user/<%= userId %>/courseList" <%= labelBookings %> ><nobr>My Courses </nobr></a>
          </div>
          <div class="navbar-nav" style = "width: 100%; float: right">
            <div <%= labelHelloMsg %> >
              <label style = "margin: 0; height: 100%; padding: .5rem 1rem;" >Hello, <%= userName %> </label>
            </div>
            <div style = "float: right; display: inline">
              <form class="form-inline my-2 my-lg-0" action="/user/login" method="GET">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit" <%= labelLogin %> >Login</button>
              </form>
            </div>
            <div style = "float: right; display: inline">
              <form class="form-inline my-2 my-lg-0" action="/user/logout" method="POST" onsubmit="submitLogout(this);return false">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit" <%= labelLogOut %> >Logout</button>
              </form>
            </div>
          </div>
        </div>
      </nav>

      <div class="jumbotron jumbotron-fluid">
        <div class="container">
          <h1 class="display-4">Coach Feedback System</h1>
          <p class="lead">Coach Feedback System is a web-based system to facilitate coach feedback of GAHK.</p>
        </div>
      </div>

      <br><br>
      <%- body %>
    </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
<script>
    async function submitLogout(oFormElement) {

        var response = await fetch(oFormElement.action, {
            method: oFormElement.method,
            credentials: 'same-origin',
        });

        if (response.ok) {
            var data = await response.json();   // for res.ok() or res.json()
            alert(data);
            // location.reload(true);
            window.location = "/";
        } else if (response.status == 401) {
            var data = await response.text();   // for res.send()
            alert(data);
        } else {
            alert(response.statusText);
        }

    };

</script>
  </body>
</html>
